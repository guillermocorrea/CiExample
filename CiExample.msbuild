<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
 
	<!--******************-->
	<!-- Build Properties  -->
	<!--******************-->
 
  <PropertyGroup>
		<!-- The build target configuration (Debug versus Release) -->
    <Configuration>Debug</Configuration>
		
		<!-- General Paths -->
		<!-- The root directory containing the build file -->
		<RootPath>$(MSBuildProjectDirectory)</RootPath>
		<!-- The source code directory -->
		<SrcBasePath>$(RootPath)\src</SrcBasePath>
		<!-- The tools directory -->
		<ToolsBasePath>$(RootPath)\tools</ToolsBasePath>
		<!-- The reports directory -->
		<ReportsPath>$(RootPath)\artifacts</ReportsPath>
		<!-- The Source Code Solution Name, this is conventions based and should be named the same as the build file. 
		     e.g. example.sln should have a matching example.msbuild file -->
		<BuildSolutionFile>src\$(MSBuildProjectName).sln</BuildSolutionFile>
		<!-- The tools path for the MSBuild Extension Pack -->
		<MSBuildExtensionsPath>$(ToolsBasePath)\MSBuild\MSBuildExtensionPack</MSBuildExtensionsPath>
		<!-- The tools path for the MSBuild Community Tasks Pack -->
		<MSBuildCommunityExtensionsPath>$(ToolsBasePath)\MSBuild\MSBuildCommunityTasks</MSBuildCommunityExtensionsPath>
		
		<!-- NUnit -->
		<!-- The tools path for NUnit -->
    	<NUnitPath>$(ToolsBasePath)\NUnit.2.6.0.12054\lib</NUnitPath>
		<!-- NUnit report name and location -->
		<NUnitOuputFile>$(ReportsPath)\tests-output.xml</NUnitOuputFile>
		
		<!-- StyleCop -->
		<!-- The tools path for StyleCop -->
		<StyleCopPath>$(ToolsBasePath)\StyleCop.4.7.33.0\lib\net35\</StyleCopPath>
		<!-- The StyleCop report name and location -->
		<!-- <StyleCopOutputFile>$(ReportsPath)\stylecop-output.xml</StyleCopOutputFile> -->
		<!-- The StyleCop max violations count -->
		<!-- <StyleCopMaxViolationCount>500</StyleCopMaxViolationCount>-->
		<!-- StyleCop Force Full Analysis -->
		<!-- <StyleCopForceFullAnalysis>true</StyleCopForceFullAnalysis>-->
		<!-- StyleCop Treat Errors As Warnings -->
		<!-- <StyleCopTreatErrorsAsWarnings>true</StyleCopTreatErrorsAsWarnings>-->
		<!-- StyleCop Cache Results -->
		<!-- <StyleCopCacheResults>false</StyleCopCacheResults>-->

		<!--<StyleCopPath>$(ToolsBasePath)\StyleCop.4.7.33.0</StyleCopPath>-->
		<!-- The StyleCop report name and location -->
		<StyleCopOutputFile>$(ReportsPath)\stylecop-output.xml</StyleCopOutputFile>
		<!-- The StyleCop max violations count -->
		<StyleCopMaxViolationCount>50</StyleCopMaxViolationCount>
		<!-- StyleCop Force Full Analysis -->
		<StyleCopForceFullAnalysis>true</StyleCopForceFullAnalysis>
		<!-- StyleCop Treat Errors As Warnings -->
		<StyleCopTreatErrorsAsWarnings>true</StyleCopTreatErrorsAsWarnings>
		<!-- StyleCop Cache Results -->
		<StyleCopCacheResults>false</StyleCopCacheResults>
		
		<!-- MSpec -->
		<!-- The tools path for MSpec -->
		<MSpecPath>$(ToolsBasePath)\Machine.Specifications.0.5.7\tools</MSpecPath>
		<MSpecExecutable>mspec-clr4.exe</MSpecExecutable>
		<MSpecPathOutputFile>$(ReportsPath)\specs-output.xml</MSpecPathOutputFile>
		<MSpecSettings></MSpecSettings>

		<!-- OpenCover -->
		<!-- The tools path for OpenCover -->
		<OpenCoverPath>$(ToolsBasePath)\OpenCover.4.0.519</OpenCoverPath>
		<OpenCoverReportGenPath>$(ToolsBasePath)\ReportGenerator.1.5.0.0</OpenCoverReportGenPath>
		<!-- OpenCover report name and location -->
		<OpenCoverOuputFile>$(ReportsPath)\coverage-output.xml</OpenCoverOuputFile>
		<OpenCoverTmpOuputFile>$(ReportsPath)\coverage-tmp-output.xml</OpenCoverTmpOuputFile>


		<!--<OpenCoverCommand>$(OpenCoverPath)\OpenCover.Console.exe -target:&quot;$(NUnitPath)\nunit-console.exe&quot; -targetargs:&quot;/noshadow @(TestAssemblies) /domain:single /xml:$(NUnitOuputFile)&quot; -filter:&quot;-[$(MSBuildProjectName)*.Tests]* +[$(MSBuildProjectName)*]$(MSBuildProjectName).*&quot; -output:$(OpenCoverTmpOuputFile)</OpenCoverCommand>-->
		<OpenCoverCommand>&quot;$(OpenCoverPath)\OpenCover.Console.exe&quot; -register:user -target:&quot;$(NUnitPath)\nunit-console.exe&quot; -targetargs:&quot;/noshadow @(TestAssemblies) /domain:single /xml:&quot;$(NUnitOuputFile)&quot; -output:&quot;$(OpenCoverTmpOuputFile)&quot;</OpenCoverCommand>

		<!-- Doxygen -->
		<DoxygenExePath>tools\doxygen-1.8.1.2\doxygen.exe</DoxygenExePath>
		<DoxygenConfigFile>tools\doxygen-1.8.1.2\config</DoxygenConfigFile>
		
		<!-- Assembly Versioning -->
		<!-- Major -->
		<AssemblyMajorVersion>1</AssemblyMajorVersion>
		<!-- Minor -->
		<AssemblyMinorVersion>0</AssemblyMinorVersion>
		<!-- Build -->
		<AssemblyBuildNumber>0</AssemblyBuildNumber>
		<!-- Revision -->
		<AssemblyRevision>0</AssemblyRevision>
		
  </PropertyGroup>
 
	<!--****************-->
	<!-- Imported Tasks -->
	<!--****************-->
 
	<!-- Include the MSBuild Extension Pack NUnit Task -->
  <UsingTask AssemblyFile="$(MSBuildExtensionsPath)\MSBuild.ExtensionPack.dll" 
						 TaskName="MSBuild.ExtensionPack.CodeQuality.NUnit"/> 
	<!-- Include the MSBuild Extension Pack AssemblyInfo Task -->
	<UsingTask AssemblyFile="$(MSBuildExtensionsPath)\MSBuild.ExtensionPack.dll" 
						 TaskName="MSBuild.ExtensionPack.Framework.AssemblyInfo"/>
	<!-- Include the StyleCop task -->
	<UsingTask AssemblyFile="$(StyleCopPath)\StyleCop.dll" 
						 TaskName="Microsoft.StyleCop.StyleCopTask"/>
 
	<!--***************-->
	<!-- Build Targets -->
	<!--***************-->
	
	<!-- The Clean Target -->
  <Target Name="Clean">
	<!-- Remove the reports directory if it already exists from a previous build -->
	<RemoveDir Directories="$(ReportsPath)" Condition = "Exists('$(ReportsPath)')" />
	<!-- Create the reports directory for this builds output -->
	<MakeDir Directories = "$(ReportsPath)"  />
	<!-- Clean the source code projects -->
    <MSBuild Projects="$(BuildSolutionFile)" ContinueOnError="false" Targets="Clean"
            Properties="Configuration=$(Configuration)" />
  </Target>
 
 <!-- The Label Target that sets the AssemblyInfo Build Version -->
 <Target Name="Label">
		<!-- Include all assemblies that end in Tests.dll (This is convention based) -->
    <CreateItem Include="**\AssemblyInfo.cs" exclude="**\*.Tests\Properties\AssemblyInfo.cs;**\*.Specs\Properties\AssemblyInfo.cs">
      <Output TaskParameter="Include" ItemName="AssemblyInfoFiles" />
    </CreateItem>
   <!-- Update an attribute and don't do any versioning -->
   <MSBuild.ExtensionPack.Framework.AssemblyInfo AssemblyInfoFiles="@(AssemblyInfoFiles)" SkipVersioning="false" Condition="'$(CCNetLabel)' != ''"
		AssemblyMajorVersion="$(AssemblyMajorVersion)" 
		AssemblyMinorVersion="$(AssemblyMinorVersion)" 
		AssemblyBuildNumber="$(AssemblyBuildNumber)" 
		AssemblyRevision="$(CCNetLabel)"
		AssemblyFileMajorVersion="$(AssemblyMajorVersion)" 
		AssemblyFileMinorVersion="$(AssemblyMinorVersion)" 
		AssemblyFileBuildNumber="$(AssemblyBuildNumber)" 
		AssemblyFileRevision="$(CCNetLabel)"		
		/>
 
 </Target>
 
 <!-- The Code Quality Target, checks the source code for stylistic compliance via StyleCop -->
	<Target Name="CodeQuality">
		<!-- Create a collection of files to scan -->
		<CreateItem Include="$(SrcBasePath)\**\*.cs">
				<Output TaskParameter="Include" ItemName="StyleCopFiles"/>
		</CreateItem>
		<!-- Run the StyleCop MSBuild task -->
		<Microsoft.StyleCop.StyleCopTask
			ProjectFullPath="$(RootPath)"
      SourceFiles="@(StyleCopFiles)"
      ForceFullAnalysis="$(StyleCopForceFullAnalysis)"
      TreatErrorsAsWarnings="$(StyleCopTreatErrorsAsWarnings)"
      CacheResults="$(StyleCopCacheResults)"
      OverrideSettingsFile="$(SrcBasePath)\Settings.StyleCop"
      OutputFile="$(StyleCopOutputFile)"
      MaxViolationCount="$(StyleCopMaxViolationCount)">
    </Microsoft.StyleCop.StyleCopTask>
	</Target>

		<!-- The Compile Target, compiles the source code for the solution -->
  <Target Name="Compile" DependsOnTargets="Clean">
    <MSBuild Projects="$(BuildSolutionFile)" ContinueOnError="false" Properties="Configuration=$(Configuration)">
      <Output ItemName="BuildOutput" TaskParameter="TargetOutputs"/>
    </MSBuild>
  </Target>
  
	<!-- The Test Target, runs unit tests on the compiled source code via NUnit -->
  <Target Name="Test" DependsOnTargets="Clean;Compile">
		<!-- Include all assemblies that end in Tests.dll (This is convention based) -->
    <CreateItem Include="**\Bin\Debug\*Tests*.dll" >
      <Output TaskParameter="Include" ItemName="TestAssemblies" />
    </CreateItem>
 
		<MSBuild.ExtensionPack.CodeQuality.NUnit Assemblies="@(TestAssemblies)" ToolPath="$(NUnitPath)" OutputXmlFile="$(NUnitOuputFile)">
    </MSBuild.ExtensionPack.CodeQuality.NUnit>
  </Target>

  <!-- Generates Apidoc -->
    <Target Name="ApiDoc">	
		<Exec Command="$(DoxygenExePath) $(DoxygenConfigFile)" ContinueOnError="false" />
	</Target>
 
 <!-- The Code Coverage Target, checks code coverage using opencover and NUnit, the 
			task generates both a coverage report and the test report -->
   <Target Name="CodeCoverage" DependsOnTargets="Clean;Compile">
		<!-- Include all assemblies that end in Tests.dll (This is convention based) -->
    <CreateItem Include="**\Bin\Debug\*Tests*.dll" >
      <Output TaskParameter="Include" ItemName="TestAssemblies" />
    </CreateItem>

    <Message Text="CodeCoverage started" />

	<Exec Command="OpenCover.bat" ContinueOnError="false" />

	<Message Text="CodeCoverage finished" />

<!--<Exec Command="tools\OpenCover.4.0.519\OpenCover.Console.exe -register:user -target:tools\NUnit.2.6.0.12054\lib\nunit-console.exe -targetargs:&quot;/noshadow src\CiExample.Tests\bin\Debug\CiExample.Tests.dll&quot; -filter:+[*]* -output:artifacts\opencover-nunit-anycpu.xml" />-->
<!--<Exec Command="&quot;C:\Users\EXTIGLGCORREAG\Documents\Visual Studio 2010\Projects\CiExample\tools\OpenCover.4.0.519\OpenCover.Console.exe&quot; -register:user -target:&quot;C:\Users\EXTIGLGCORREAG\Documents\Visual Studio 2010\Projects\CiExample\tools\NUnit.2.6.0.12054\lib\nunit-console.exe&quot; -targetargs:&quot;/noshadow src\CiExample.Tests\bin\Debug\CiExample.Tests.dll /domain:single /xml:&quot;C:\Users\EXTIGLGCORREAG\Documents\Visual Studio 2010\Projects\CiExample\artifacts\tests-output.xml&quot; -filter:&quot;-[CiExample.Tests]* +[Negocio*]Negocio.*&quot; -output:&quot;artifacts\coverage-tmp-output.xml&quot;" />-->

<!--<Exec Command="&quot;$(OpenCoverPath)\OpenCover.Console.exe&quot; -register:user -target:&quot;$(NUnitPath)\nunit-console.exe&quot; -targetargs:&quot;/noshadow src\CiExample.Tests\bin\Debug\CiExample.Tests.dll /domain:single /xml:&quot;$(NUnitOuputFile)&quot; -output:&quot;$(OpenCoverTmpOuputFile)&quot;" />-->

<!--<Exec Command="&quot;$(OpenCoverPath)\OpenCover.Console.exe&quot; -register:user -target:&quot;$(NUnitPath)\nunit-console.exe&quot; -targetargs:&quot;/noshadow @(TestAssemblies) /domain:single /xml:&quot;$(NUnitOuputFile)&quot; -filter:&quot;-[$(MSBuildProjectName)*.Tests]* +[$(MSBuildProjectName)*]$(MSBuildProjectName).*&quot; -output:&quot;$(OpenCoverTmpOuputFile)&quot;" />-->


  <!--  <Exec Command="&quot;$(OpenCoverReportGenPath)\ReportGenerator.exe&quot; &quot;$(OpenCoverTmpOuputFile)&quot; &quot;$(ReportsPath)&quot; XmlSummary" /> -->
		<!-- Report Generator has no way to name the output file so rename it by copying and deleting the original file -->
		<!-- <Copy SourceFiles="$(ReportsPath)\Summary.xml" DestinationFiles="$(OpenCoverOuputFile)"></Copy> 
		<Delete Files="$(ReportsPath)\Summary.xml"></Delete>-->
		<!-- Delete the original opencover output before it was transformed by ReportGenerator -->
    <!--<Delete Files="$(OpenCoverTmpOuputFile)" />-->
		
  </Target>
	
 <!-- The Specs Target, runs the context specifications on the compiled source code via MSpec -->
 <Target Name="Specs" DependsOnTargets="Compile">
		<!-- Include all assemblies that end in Specs.dll (This is convention based) -->
    <CreateItem Include="**\Bin\Debug\*Specs*.dll" >
      <Output TaskParameter="Include" ItemName="SpecsAssemblies" />
    </CreateItem>
 
    <PropertyGroup>
      <MSpecCommand>
        $(MSpecPath)\$(MSpecExecutable) $(MSpecSettings) @(SpecsAssemblies) --xml $(MSpecPathOutputFile)
      </MSpecCommand>
    </PropertyGroup>
    <Message Importance="high" Text="Running Specs with this command: $(MSpecCommand)"/>
    <Exec Command="$(MSpecCommand)" />
 </Target>
 
 <!-- The default build task that pulls the other tasks together -->
	<!--<Target Name="Build" DependsOnTargets="Clean;CodeQuality;Compile;Test;Specs">
	</Target>-->
	<Target Name="Build" DependsOnTargets="Clean;CodeQuality;Compile;ApiDoc;CodeCoverage">
	</Target>
	
 <!-- The CI build task that pulls the other tasks together and includes assembly labelling that pulls in the CI servers build number -->
	<Target Name="CI" DependsOnTargets="Clean;CodeQuality;Label;Compile;Tests;Specs">
	</Target>	
	
 <!-- The CI build task that pulls the other tasks together, tests are run including codecoverage and includes assembly labelling that pulls in the CI servers build number -->
	<Target Name="CICoverage" DependsOnTargets="Clean;CodeQuality;Compile;CodeCoverage">
	</Target>		
</Project>